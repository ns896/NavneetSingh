import"./faceplate-batch-0d67b562.js";import"./faceplate-switch-input-084d3f59.js";import{E as t,m as e,T as n,t as r,b as i,_ as o,o as s,W as a,c as l,a as p}from"./shell-010f89b8.js";import{_ as d,j as c,n as h,h as u,s as b,i as m,x as f,o as w}from"./icon-333959f6.js";import"./shreddit-signup-drawer-5ed79dee.js";import{m as v,a as x,B as g}from"./xpromo-0728e449.js";import{A as y}from"./app-link-12bb494e.js";import"./checked-input-element-c27a5688.js";import"./faceplate-input-2a2c1f51.js";import"./input-element-e9f4def4.js";import"./form-common-utils-8fdfcdc2.js";import"./constants-3ee6bdfd.js";import"./scroll-blocker-bb86940a.js";import"./constants-97f2b567.js";import"./onboarding-cbb7c957.js";import"./shreddit-overlay-b256a1ca.js";import"./index-d0188b3c.js";import"./contextualSignupPrompt-cad3300a.js";var k,S;!function(t){t.Slot="slot",t.Wrap="wrap"}(k||(k={})),function(t){t.NSFW="nsfw",t.Spoiler="spoiler",t.NsfwAndSpoiler="nsfwAndSpoiler"}(S||(S={}));const j=t=>{switch(t){case S.Spoiler:return"View spoiler";case S.NsfwAndSpoiler:return"View NSFW content & spoilers";default:return"View NSFW content"}};let A=class extends b{constructor(){super(),this.blurred=!0,this.isNsfwAllowed=!0,this.blurRadius=40,this.mode=k.Slot,this.isCrosspost=!1,this.isRichtextContent=!1,this.hasMetadata=!1,this._windowEvents=new t(this,(()=>window)),this.handleNsfwEvent=t=>{const n=t.detail.details||t.detail;if("xpromo/view/nsfw_blur"===e(n)){this.isNsfwAllowed=!1;const t=this.querySelector('div[slot="revealed"]');t&&this.removeChild(t)}},this._windowEvents.define(n,this.handleNsfwEvent)}static get styles(){return[r,m`.outer{width:100%;overflow:hidden;z-index:0;position:relative}.overlay{cursor:pointer;position:absolute;width:100%;height:100%;top:0;left:0;z-index:1;display:flex;justify-content:center;align-items:center}.inner.blurred{display:block;pointer-events:none;background:rgba(0,0,0,.8)}.legacy-button{background:rgba(0,0,0,.07);border:1px solid #fff;color:#fff;padding:10px 20px;position:absolute;text-transform:uppercase;cursor:pointer}`]}renderOverlay(t){const e=this.reason?i({appearance:"media",size:o.Small,shape:"pill",children:j(this.reason)}):f``;return this.reason===S.Spoiler&&this.blurred?f`${C({content:e})}`:this.isNsfwAllowed&&this.blurred&&t?C({content:e}):""}render(){const t=this.isRichtextContent&&this.blurred,e=this.reason===S.NSFW||this.reason===S.NsfwAndSpoiler;return f`\n <div \n class="${s({outer:!0,"xs:rounded-t-[16px]":!!this.reason&&!this.isCrosspost&&this.blurred,"xs:rounded-b-[16px]":!!this.reason&&!this.isCrosspost&&(t||!this.hasMetadata)&&this.blurred,"h-[88px]":t,"h-full":!t})}" \n @click="${this.handleClick}" \n>\n ${this.renderOverlay(e)}\n <span \n class="${s({inner:!0,blurred:this.blurRadius>0&&this.blurred})}" \n style="${w({filter:this.blurred&&this.blurRadius>0&&`blur(${this.blurRadius}px)`||"none"})}" \n aria-hidden="${Boolean(this.blurred)}" \n aria-live="polite" \n>\n ${this.mode===k.Slot&&this.blurred?f` <slot name="blurred"></slot> `:f` <slot name="revealed"></slot> `}\n </span>\n\n ${this.blurred?f`<div class="absolute top-0 left-0 w-full h-full bg-scrim"></div>`:""}\n </div>\n `}handleClick(){const t=this.reason===S.NSFW||this.reason===S.NsfwAndSpoiler;(this.reason===S.Spoiler&&this.blurred||this.blurred&&t)&&(this.isNsfwAllowed||this.reason===S.Spoiler)&&(this.blurred=!1)}};d([c()],A.prototype,"blurred",void 0),d([c()],A.prototype,"isNsfwAllowed",void 0),d([h({type:Number,attribute:"blur-radius"})],A.prototype,"blurRadius",void 0),d([h({type:String})],A.prototype,"reason",void 0),d([h({type:String})],A.prototype,"mode",void 0),d([h({type:Boolean,attribute:"is-crosspost"})],A.prototype,"isCrosspost",void 0),d([h({type:Boolean,attribute:"is-richtext-content"})],A.prototype,"isRichtextContent",void 0),d([h({type:Boolean,attribute:"has-metadata"})],A.prototype,"hasMetadata",void 0),A=d([u("shreddit-blurred-container")],A);const C=({content:t})=>f`<div data-ignore-click-interception class="overlay">${t}</div>`;const N=a(b);let E=class extends N{constructor(){super(...arguments),this.poster=""}static get styles(){return l(":host {\n  background-color: black;\n  display: block;\n  height: 100%;\n  overflow: hidden;\n  position: relative;\n}\n.poster,\n.prompt {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n.poster {\n  filter: blur(6px);\n  opacity: 0.55;\n  z-index: 0;\n}\n.prompt {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  z-index: 1;\n}\n.text {\n  color: hsla(0, 0%, 100%, 0.8);\n  font: var(--font-title-h4);\n  margin: 0;\n  max-width: 300px;\n  text-align: center;\n}\n@media (max-width: 320px) {\n  .text {\n    margin: 12px 0 20px;\n  }\n}\n")}firstUpdated(){this.trackEvent(v())}render(){return f`\n <shreddit-img \n alt="Media error" \n class="poster" \n loading="eager" \n objectfit="contain" \n .src="${this.poster}" \n></shreddit-img>\n <div class="prompt">\n <p class="text">\n Sorry, something went wrong when loading this video.\n </p>\n <slot name="button"></slot>\n </div>\n `}};d([h({type:String})],E.prototype,"poster",void 0),E=d([u("xpromo-media-error")],E);const $=p(a(b));let M=class extends ${constructor(){super(...arguments),this.appLinkParams={},this._appLinkController=new y(this)}static get styles(){return[r,l(".MediaErrorButton {\n  overflow: hidden;text-overflow: ellipsis;white-space: nowrap;\n}\n.MediaErrorButton {\n  --button-color-text: var(--color-global-white);\n  --button-border-color: var(--color-global-white);\n  border-radius: 3px;\n  text-transform: uppercase;\n  margin-top: 24px;\n}\n.MediaErrorButton,\n.MediaErrorButton:link,\n.MediaErrorButton:visited,\n.MediaErrorButton:active {\n  text-decoration: none;\n}\n")]}onViewInAppClick(){this.trackEvent(x(g.GetApp)),this._appLinkController.handleOpenInAppClick()}render(){return f`\n <shreddit-interactable-element @interactionEvent="${this.onViewInAppClick}">\n ${i({attributes:{className:"MediaErrorButton",rel:"nofollow",href:this._appLinkController.getAppLink(this.appLinkParams)},size:o.Medium,appearance:"bordered",children:"View in app"})}\n </shreddit-interactable-element>\n `}};d([h({type:Object,attribute:"app-link-params"})],M.prototype,"appLinkParams",void 0),M=d([u("xpromo-media-error-button")],M);const L=p(b);let B=class extends L{constructor(){super(...arguments),this.appLinkParams={},this._appLinkController=new y(this),this.blurredContainer=null,this.handleSlotchange=t=>{if(!(t.target instanceof HTMLSlotElement))return;const e=t.target.assignedNodes({flatten:!0});for(const t of e)if(t instanceof A){this.blurredContainer=t,this.blurredContainer.setAttribute("blurred","");break}}}static get styles(){return[r,l(".viewInApp {\n  overflow: hidden;text-overflow: ellipsis;white-space: nowrap;\n}\n:host {\n  display: block;\n  position: relative;\n  height: 100%;\n}\n.prompt.hidden {\n  display: none;\n}\n.prompt {\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.45);\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  left: 0;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n.icon {\n  color: hsla(0, 0%, 100%, 0.6);\n  font-size: 36px;\n  text-align: center;\n}\n.title,\n.text {\n  color: hsla(0, 0%, 100%, 0.8);\n  max-width: 300px;\n  text-align: center;\n}\n.title {\n  font: var(--font-title-h3);\n  margin: 18px 0 0;\n}\n.text {\n  font: var(--font-title-h4);\n  font-weight: normal;\n  margin: 10px 0 24px;\n}\n@media (max-width: 320px) {\n  .text {\n    margin: 12px 0 20px;\n  }\n}\n.viewInApp {\n  flex-shrink: 0;\n  --button-color-text: var(--color-global-white);\n  --button-border-color: var(--color-global-white);\n  border-radius: 3px;\n  text-transform: uppercase;\n}\n.viewInApp,\n.viewInApp:link,\n.viewInApp:visited,\n.viewInApp:active {\n  text-decoration: none;\n}\n")]}render(){return f`\n <slot @slotchange="${this.handleSlotchange}"></slot>\n <div class="prompt">\n <div class="icon">\n <icon-nsfw fill></icon-nsfw>\n </div>\n <h3 class="title">\n Mature Content\n </h3>\n <p class="text">\n This is mature content and may not be appropriate for certain viewers. To continue, use the app to verify you\u2019re over 18 and browse anonymously.\n </p>\n ${i({attributes:{className:"viewInApp",rel:"nofollow",href:this._appLinkController.getAppLink(this.appLinkParams)},size:o.Medium,appearance:"secondary",children:"View in app"})}\n </div>\n `}};d([h({type:Object,attribute:"app-link-params"})],B.prototype,"appLinkParams",void 0),B=d([u("xpromo-nsfw-blocking-container")],B);
//# sourceMappingURL=deprecated-content-client-js-af97eea2.js.map
